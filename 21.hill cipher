import string

def greatest_common_divisor(a: int, b: int) -> int:
    """
    >>> greatest_common_divisor(4, 8)
    4
    >>> greatest_common_divisor(8, 4)
    4
    >>> greatest_common_divisor(4, 7)
    1
    >>> greatest_common_divisor(0, 10)
    10
    """
    return b if a == 0 else greatest_common_divisor(b % a, a)

class HillCipher:
    key_string = string.ascii_uppercase + string.digits

    def __init__(self, encrypt_key):
        self.encrypt_key = encrypt_key
        self.check_determinant()
        self.decrypt_key = None
        self.break_key = len(encrypt_key)

    @staticmethod
    def modulus(x: int) -> int:
        return x % 36

    @staticmethod
    def round_int(x: float) -> int:
        return round(x)

    def replace_letters(self, letter: str) -> int:
        return self.key_string.index(letter)

    def replace_digits(self, num: int) -> str:
        return self.key_string[self.round_int(num)]

    def check_determinant(self) -> None:
        det = round(self.determinant(self.encrypt_key))
        if det < 0:
            det = det % len(self.key_string)
        req_l = len(self.key_string)
        if greatest_common_divisor(det, len(self.key_string)) != 1:
            raise ValueError(
                f"determinant modular {req_l} of encryption key({det}) is not co prime w.r.t {req_l}.\nTry another key."
            )

    @staticmethod
    def determinant(m: list) -> float:
        if len(m) == 1:
            return m[0][0]
        elif len(m) == 2:
            return m[0][0] * m[1][1] - m[0][1] * m[1][0]
        else:
            det = 0
            for i in range(len(m)):
                sign = (-1) ** i
                sub_det = HillCipher.determinant(
                    [row[:i] + row[i + 1:] for row in (m[:0] + m[1:])]
                )
                det += sign * m[0][i] * sub_det
            return det

    def process_text(self, text: str) -> str:
        chars = [char for char in text.upper() if char in self.key_string]
        last = chars[-1]
        while len(chars) % self.break_key != 0:
            chars.append(last)
        return "".join(chars)

    def encrypt(self, text: str) -> str:
        text = self.process_text(text.upper())
        encrypted = ""
        for i in range(0, len(text) - self.break_key + 1, self.break_key):
            batch = text[i: i + self.break_key]
            batch_vec = [self.replace_letters(char) for char in batch]
            batch_encrypted = [
                self.modulus(
                    sum(
                        [
                            self.encrypt_key[i][j] * batch_vec[j]
                            for j in range(self.break_key)
                        ]
                    )
                )
                for i in range(self.break_key)
            ]
            encrypted_batch = "".join(
                self.replace_digits(num) for num in batch_encrypted
            )
            encrypted += encrypted_batch
        return encrypted

    def make_decrypt_key(self):
        det = round(self.determinant(self.encrypt_key))
        if det < 0:
            det = det % len(self.key_string)
        det_inv = None
        for i in range(len(self.key_string)):
            if (det * i) % len(self.key_string) == 1:
                det_inv = i
                break
        inv_key = [
            [
                self.modulus(
                    det_inv
                    * (
                        self.determinant(
                            [
                                row[:j] + row[j + 1 :]
                                for row in (
                                    self.encrypt_key[:i] + self.encrypt_key[i + 1 :]
                                )
                            ]
                        )
                    )
                )
                for j in range(self.break_key)
            ]
            for i in range(self.break_key)
        ]
        return inv_key

    def decrypt(self, text: str) -> str:
        self.decrypt_key = self.make_decrypt_key()
        text = self.process_text(text.upper())
        decrypted = ""
        for i in range(0, len(text) - self.break_key + 1, self.break_key):
            batch = text[i: i + self.break_key]
            batch_vec = [self.replace_letters(char) for char in batch]
            batch_decrypted = [
                self.modulus(
                    sum(
                        [
                            self.decrypt_key[i][j] * batch_vec[j]
                            for j in range(self.break_key)
                        ]
                    )
                )
                for i in range(self.break_key)
            ]
            decrypted_batch = "".join(
                self.replace_digits(num) for num in batch_decrypted
            )
            decrypted += decrypted_batch
        return decrypted

def main():
    N = int(input("Enter the order of the encryption key: "))
    hill_matrix = []
    print("Enter each row of the encryption key with space separated integers")
    for i in range(N):
        row = [int(x) for x in input().split()]
        hill_matrix.append(row)
    hc = HillCipher(hill_matrix)
    print("Would you like to encrypt or decrypt some text? (1 or 2)")
    option = input("\n1. Encrypt\n2. Decrypt\n")
    if option == "1":
        text_e = input("What text would you like to encrypt?: ")
        print("Your encrypted text is:")
        print(hc.encrypt(text_e))
    elif option == "2":
        text_d = input("What text would you like to decrypt?: ")
        print("Your decrypted text is:")
        print(hc.decrypt(text_d))

if __name__ == "__main__":
    main()
